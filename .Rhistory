library(ggplot2)
ggplot(dfd, aes(steps)) +
geom_histogram(fill = "blue")
dim(dfd)
ggplot(dfd, aes(steps)) +
geom_histogram(fill = "blue", breaks = c(0,5000,10000,15000,20000,25000),
labs(y = "Frequency", x = "Steps per Day", title = "Fig 1"))
ggplot(dfd, aes(steps)) +
geom_histogram(fill = "blue", breaks = c(0,5000,10000,15000,20000,25000),
labs(y = "Frequency"),
labs(x = "Steps per Day"),
labs(title = "Fig 1"))
ggplot(dfd, aes(steps)) +
geom_histogram(fill = "blue", breaks = c(0,5000,10000,15000,20000,25000),
labs(y = "Frequency"),
labs(x = "Steps per Day"))
ggplot(dfd, aes(steps)) +
geom_histogram(fill = "blue", breaks = c(0,5000,10000,15000,20000,25000))
ggplot(dfd, aes(steps)) +
geom_histogram(fill = "blue", binwidth = 5000))
ggplot(dfd, aes(steps)) +
geom_histogram(fill = "blue", binwidth = 5000)
ggplot(dfd, aes(steps)) +
geom_histogram(fill = "orchid", binwidth = 5000)
ggplot(dfd, aes(steps)) +
geom_histogram(fill = "orchid", binwidth = 2500)
ggplot(dfd, aes(steps)) +
geom_histogram(fill = "orchid", color = "grey70", binwidth = 2500)
ggplot(dfd, aes(steps)) +
geom_histogram(fill = "orchid", alpah = 0.3, color = "grey70", binwidth = 2500)
ggplot(dfd, aes(steps)) +
geom_histogram(fill = "orchid", alpah = 0.7, color = "grey70", binwidth = 2500)
ggplot(dfd, aes(steps)) +
geom_histogram(fill = "orchid", alpha = 0.7, color = "grey70", binwidth = 2500)
ggplot(dfd, aes(steps)) +
geom_histogram(fill = "orchid", alpha = 0.7, color = "grey70", binwidth = 2500) +
labs(y = "Frequency", x = "Steps per Day")
ggplot(dfd, aes(steps)) +
geom_histogram(fill = "orchid", alpha = 0.7, color = "grey70", binwidth = 2500) +
labs(y = "Frequency", x = "Steps per Day") +
labs(title = "Figure 1")
ggplot(dfd, aes(steps)) +
geom_histogram(fill = "orchid", alpha = 0.7, color = "grey70", binwidth = 2500) +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title.y = element_text(size = 22),
axis.title.x = element_text(size = 22)) +
labs(y = "Frequency", x = "Steps per Day") +
labs(title = "Figure 1")
ggplot(dfd, aes(steps)) +
geom_histogram(fill = "orchid", alpha = 0.7, color = "grey70", binwidth = 2500) +
theme(axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.y = element_text(size = 17),
axis.title.x = element_text(size = 17)) +
labs(y = "Frequency", x = "Steps per Day") +
ggtitle("Figure 1")
ggplot(dfd, aes(steps)) +
geom_histogram(fill = "orchid", alpha = 0.7, color = "grey70", binwidth = 2500) +
theme(plot.title=element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.y = element_text(size = 17),
axis.title.x = element_text(size = 17)) +
labs(y = "Frequency", x = "Steps per Day") +
ggtitle("Figure 1")
mean = mean(dfd$steps)
mean
mean.steps = mean(dfd$steps)
mean.steps
median.steps = median(dfd$steps)
median.steps
head(activity)
df.ave = ddply(activity, -interval, summarise, mean = mean, na.rm = T)
library(plyr)
df.ave = ddply(activity, -interval, summarise, mean = mean, na.rm = T)
head(activity)
df.ave = ddply(activity, ~interval, summarise, mean = mean, na.rm = T)
df.ave = ddply(activity, ~interval, summarise, mean = mean(steps, na.rm = T))
ggplot(df.ave, aes(interval)) +
geom_line()
ggplot(df.ave, aes(interval)) +
geom_line(aes(y = interval))
ggplot(df.ave, aes(interval)) +
geom_line(aes(y = interval, x= date))
ggplot(df.ave, aes(interval, steps)) +
geom_line(color = "red", lwd = 2) +
theme(plot.title=element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.y = element_text(size = 17),
axis.title.x = element_text(size = 17)) +
labs(x= "interval", y = "steps")
ggtitle("Figure 2")
ggplot(df.ave, aes(interval, steps)) +
geom_line(color = "red", lwd = 2)
head(df.ave)
ggplot(df.ave, aes(interval, mean)) +
geom_line(color = "red", lwd = 2)
ggplot(df.ave, aes(interval, mean)) +
geom_line(color = "red", lwd = 2) +
theme(plot.title=element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.y = element_text(size = 17),
axis.title.x = element_text(size = 17)) +
labs(x= "interval", y = "steps")
ggtitle("Figure 2")
max(df.ave$mean)
df.ave$interval[which.max(df.ave$mean)]
max(df.ave$mean)
ggplot(df.ave, aes(interval, mean)) +
geom_line(color = "red", lwd = 2) +
theme(plot.title=element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.y = element_text(size = 17),
axis.title.x = element_text(size = 17)) +
labs(x= "interval", y = "mean of interval")
ggtitle("Figure 2")
length(activity$steps)
length(us.na(activity$steps))
length(is.na(activity$steps))
length(!is.na(activity$steps))
sum(is.na(activity$steps))
calcMean = function(x) replace(x, is.na(x), mean(x, na.rm = T))
activity2 = ddply(activity, ~interval, tranfrom, steps = calcMean(steps))
activity2 = ddply(activity, ~interval, transfrom, steps = calcMean(steps))
activity2 = ddply(activity, ~interval, transform, steps = calcMean(steps))
sum(is.na(activity2$steps))
df.ave2 = ddply(activity2, ~interval, summarise, mean = mean(steps, na.rm = T))
ggplotdf.(df.ave2), aes(steps)) +
geom_histogram(fill = "chartreuse3", alpha = 0.7, color = "grey70", binwidth = 2500) +
theme(plot.title=element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.y = element_text(size = 17),
axis.title.x = element_text(size = 17)) +
labs(y = "Frequency", x = "Steps per Day") +
ggtitle("Figure 3")
ggplot(df.ave2), aes(steps)) +
geom_histogram(fill = "chartreuse3", alpha = 0.7, color = "grey70", binwidth = 2500) +
theme(plot.title=element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.y = element_text(size = 17),
axis.title.x = element_text(size = 17)) +
labs(y = "Frequency", x = "Steps per Day") +
ggtitle("Figure 3")
ggplot(df.ave2, aes(steps)) +
geom_histogram(fill = "chartreuse3", alpha = 0.7, color = "grey70", binwidth = 2500) +
theme(plot.title=element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.y = element_text(size = 17),
axis.title.x = element_text(size = 17)) +
labs(y = "Frequency", x = "Steps per Day") +
ggtitle("Figure 3")
head(df.ave2)
ggplot(df.ave2, aes(mean)) +
geom_histogram(fill = "chartreuse3", alpha = 0.7, color = "grey70", binwidth = 2500) +
theme(plot.title=element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.y = element_text(size = 17),
axis.title.x = element_text(size = 17)) +
labs(y = "Frequency", x = "Steps per Day") +
ggtitle("Figure 3")
ggplot(df.ave, aes(interval, mean)) +
geom_line(color = "red", lwd = 2) +
theme(plot.title=element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.y = element_text(size = 17),
axis.title.x = element_text(size = 17)) +
labs(x= "interval", y = "mean of the interval") +
ggtitle("Figure 2")
dfd2 = aggregate(steps ~ date, data = activity, sum)
head(dfd2)
ggplot(dfd2, aes(steps)) +
geom_histogram(fill = "chartreuse3", alpha = 0.7, color = "grey70", binwidth = 2500) +
theme(plot.title=element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.y = element_text(size = 17),
axis.title.x = element_text(size = 17)) +
labs(y = "Frequency", x = "Steps per Day") +
ggtitle("Figure 3")
mean.steps2 = mean(dfd2$steps)
mean.steps2
median.steps2 = median(dfd2$steps)
median.steps2
str(activity)
activity$date = as.Date(activity$date)
str(activity)
weekdays = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
activity$dayType = factor(weekdays(activity$date %in% weekdays),
levels = c(1,2), lables = c("weekday", "weekend"))
activity$dayType = factor((weekdays(activity$date %in% weekdays)),
levels = c(1,2), lables = c("weekday", "weekend"))
activity$dayType = factor((weekdays(activity$date %in% weekdays)),
levels = c(1,2),
labels = c("weekday", "weekend"))
activity$dayType = factor((weekdays(activity$date %in% daysoftheweek)),
levels = c(1,2),
labels = c("weekday", "weekend"))
daysoftheweek = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
activity$dayType = factor((weekdays(activity$date %in% daysoftheweek)),
levels = c(1,2),
labels = c("weekday", "weekend"))
activity$dayType = factor((weekdays(activity$date %in% daysoftheweek)) +1L,
levels = c(1,2),
labels = c("weekday", "weekend"))
activity$dayType = factor((weekdays(activity$date %in% daysoftheweek)),
levels = c(1:2),
labels = c("weekday", "weekend"))
(abs(mean.steps - mean.steps2)/mean.steps)*100
(abs(median.steps - median.steps2)/mean.steps)*100
activity = mutate(activity, day = weekdays(date))
head(activity)
tail(activity)
activity.weekday = filter(activity, day == daysoftheweek)
tail(activity)
activity.weekday = filter(activity, day == c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
activity.weekday = select(activity, day == c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
activity.weekday = filter(activity, day == c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
activity.weekday = select(activity, day == c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
activity.weekday = filter(activity, day == "Monday" | day == "Tuesday" | day == "Wednesday" | day == "Thursday" | day "Friday"))
activity.weekday = filter(activity, daysoftheweek))
activity.weekday = filter(activity, daysoftheweek)
activity.weekday = filter(activity, day == "daysoftheweek")
head(activity.weekday)
activity.weekday = select(activity, day == "daysoftheweek")
activity.weekday = select(activity, day == daysoftheweek)
activity.weekday = filter_(activity, day == daysoftheweek)
activity.weekday = filter_(activity, activity$day == daysoftheweek)
activty.weekend  = filter_(activity, activity$day != daysoftheweek)
head(activity.weekday)
dim(activity.weekday)
dim(activity.weekend)
activity.weekday = activity %>% activity$day == daysoftheweek
activity.weekday = activity %>% day == daysoftheweek
activity.weekday = activity %>% filter(day == daysoftheweek)
activity.weekday = activity %>% day %>% filter(str_detect(day) == daysoftheweek)
activity.weekday = activity %>% day %>% filter(str_detect(activity$day) == daysoftheweek)
activity.weekday = activity %>% activty$day %>% filter(str_detect(activity$day) == daysoftheweek)
for (i in 1:length(activity$day)) {
if activity[i,4] == daysoftheweek {
activity[i,4] == "weekday"
}
else {
activity[i,4] == "weekend"
}
}
activity$day = as.factor(activity$day)
for (i in 1:length(activity$day)) {
if activity[i,4] == daysoftheweek {activity[i,4] == "weekday"}
else {activity[i,4] == "weekend"}}
activity$day = as.factor(activity$day)
for (i in 1:length(activity$day)) {
if (activity[i,4] == daysoftheweek ){
activity[i,4] == "weekday"
}
else {
activity[i,4] == "weekend"
}
}
activity$day = as.factor(activity$day)
warning()
head(activty)
head(activity)
for (i in 1:length(activity$day)) {
if (activity[i,4] == "daysoftheweek" ){
activity[i,4] == "weekday"
}
else {
activity[i,4] == "weekend"
}
}
activity$day = as.factor(activity$day)
head(activity)
daysoftheweek = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
activity = mutate(activity, day = weekdays(date))
for (i in 1:length(activity$day)) {
if (activity[i,4] == "daysoftheweek" ){
activity[i,4] == "weekday"
}
else {
activity[i,4] == "weekend"
}
}
activity$day = as.factor(activity$day)
head(activity)
activity$day == "Saturday"
activity$day == "Sunday"
for (i in 1:length(activity$day)) {
if (activity[i,4] == c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday") ){
activity[i,4] == "weekday"
}
else {
activity[i,4] == "weekend"
}
}
activity$day = as.factor(activity$day)
head(activity)
activity$day == "Sunday"
for (i in 1:length(activity$day)) {
if (activity[i,4] == "Saturday" | activity[i,4] = "Sunday") {
activity[i,4] == "weekend"
}
else {
activity[i,4] == "weekday"
}
}
for (i in 1:length(activity$day)) {
if (activity[i,4] == "Saturday" | activity[i,4] == "Sunday") {
activity[i,4] == "weekend"
}
else {
activity[i,4] == "weekday"
}
}
activity$day = as.factor(activity$day)
head(activity)
for (i in 1:length(activity$day)) {
if (activity[i,4] == "samedi") {
activity[i,4] == "weekend"
}
else {
activity[i,4] == "weekday"
}
}
activity$day = as.factor(activity$day)
head(activity)
str(activity)
for (i in 1:length(activity$day)) {
if (activity[i,4] == "samedi") {
activity[i,4] = "weekend"
}
else {
activity[i,4] = "weekday"
}
}
activity$day = as.factor(activity$day)
head(activity)
str(activity)
activity = read.csv("activity.csv", header = T)
activity = mutate(activity, day = weekdays(date))
str(activity)
activity$date = as.Date(activity$date)
str(activity)
activity = mutate(activity, day = weekdays(date))
for (i in 1:length(activity$day)) {
if (activity[i,4] == "Saturday" | activity[i,4] == "Sunday" ) {
activity[i,4] = "weekend"
}
else {
activity[i,4] = "weekday"
}
}
activity$day = as.factor(activity$day)
head(activity)
df.ave5 = ddply(activity, ~interval, summarise, mean = mean(steps, na.rm = T))
ggplot(df.ave5, aes(interval, mean)) +
geom_line(color = "red", lwd = 2) +
facet_wrap(~day) +
theme(plot.title=element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.y = element_text(size = 17),
axis.title.x = element_text(size = 17)) +
labs(x= "interval", y = "mean of the interval") +
ggtitle("Figure 4")
df.ave5 = ddply(activity, .(interval), summarise, freq = length(steps)/freq)
df.ave5 = ddply(activity, .(interval), summarise, mean = mean(steps, na.rm = T))
head(df.ave5)
head(activity)
head(df.ave)
xyplot(mean ~ interval | day, data = activity, type = "l", layout = c(1,2))
plot(mean ~ interval | day, data = activity, type = "l", layout = c(1,2))
weekday = subset(activity$day == "weekday")
weekday = subset(activity, day == "weekday")
head(weekday)
df.wd = ddply(weekday, ~interval, summarise, mean = mean(steps, na.rm = T))
weekend = subset(activity, day == "weekend")
df.we = ddply(weekend, ~interval, summarise, mean = mean(steps, na.rm = T))
ggplot(df.wd, aes(interval, mean)) +
geom_line(color = "red", lwd = 2) +
facet_wrap(~day) +
theme(plot.title=element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.y = element_text(size = 17),
axis.title.x = element_text(size = 17)) +
labs(x= "interval", y = "mean of the interval") +
ggtitle("Figure 4")
ggplot(df.wd, aes(interval, mean)) +
geom_line(color = "red", lwd = 2)
g2.line = ggplot() +
geom_line(data =df.wd, aes(x = interval, y = mean)) +
geom_line(data =df.we, aes(x = interval, y = mean), color = "seagreen4") +
theme(plot.title=element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.y = element_text(size = 17),
axis.title.x = element_text(size = 17)) +
labs(x= "interval", y = "mean of the interval") +
ggtitle("Figure 4")
g2.line
g2.line = ggplot() +
geom_line(data =df.wd, aes(x = interval, y = mean)) +
geom_line(data =df.we, aes(x = interval, y = mean), color = "seagreen4") +
theme(legend.title=element_blank(),
legend.text = element_text(size = 22)) +
theme(plot.title=element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.y = element_text(size = 17),
axis.title.x = element_text(size = 17)) +
labs(x= "interval", y = "mean of the interval") +
ggtitle("Figure 4")
g2.line
g2.line = ggplot() +
geom_line(data =df.wd, aes(x = interval, y = mean)) +
geom_line(data =df.we, aes(x = interval, y = mean), color = "seagreen4") +
theme(legend.text = element_text(size = 22)) +
theme(plot.title=element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.y = element_text(size = 17),
axis.title.x = element_text(size = 17)) +
labs(x= "interval", y = "mean of the interval") +
ggtitle("Figure 4")
g2.line
g2.line = ggplot() +
geom_line(data =df.wd, aes(x = interval, y = mean)) +
geom_line(data =df.we, aes(x = interval, y = mean), color = "seagreen4") +
theme(legend.text = element_text(size = 22)) +
theme(plot.title=element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.y = element_text(size = 17),
axis.title.x = element_text(size = 17)) +
labs(x= "interval", y = "mean of the interval") +
annotate("text", x = 500, y = 120, label = "Weekday", size = 10) +
annotate("text", x = 1500, y = 200, label = "Weekend", size = 10, color = "seagreen4")
ggtitle("Figure 4")
g2.line
g2.line = ggplot() +
geom_line(data =df.wd, aes(x = interval, y = mean)) +
geom_line(data =df.we, aes(x = interval, y = mean), color = "seagreen4") +
theme(legend.text = element_text(size = 22)) +
theme(plot.title=element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.y = element_text(size = 17),
axis.title.x = element_text(size = 17)) +
labs(x= "interval", y = "mean of the interval") +
annotate("text", x = 500, y = 120, label = "Weekday", size = 8) +
annotate("text", x = 1500, y = 200, label = "Weekend", size = 8, color = "seagreen4")
ggtitle("Figure 4")
g2.line
agricultureLogical = data[["ACR"]] == 3 & data[["AGS"]] == 6
which(agricultureLogical)
myurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
z <- tempfile()
download.file(myurl,z,mode="wb")
pic <- readJPEG(z, native = TRUE)
file.remove(z) # cleanup
quantile(pic, probs = c(0.10, 0.30, 0.50, 0.80))
URL3 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(URL3, destfile = "data3.csv", method="curl")
data3 = read.csv("data3.csv", header = F, skip = 5)
URL4 <-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(URL4, destfile = "data4.csv", method="curl")
data4 = read.csv("data4.csv", header = T)
head(data3)
head(data4)
gdp = data3
edu = data4
fed = data4
rm(edu)
colnames(gdp) = c("CountryCode", "Rank", "Economy", "Total"))
colnames(gdp) = c("CountryCode", "Rank", "Economy", "Total")
head(gdp)
merge = merge(gdp, fed, by = "CountryCode")
head(merge)
sorted = sort(merge)
sorted = sort(merge, by = "CountryCode")
sorted = sort(merge, by = "CountryCode", decreasing = TRUE)
sorted = sort(merge[,1], by = "CountryCode", decreasing = TRUE)
dim(sorted)
dim(merge)
merge[1:20,1]
class(merge)
str(merge)
detach("package:dplyr", unload=TRUE)
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
dim(merge)
arrange(merge, desc(Rank))[13, Economy]
data3 = read.csv("data3.csv", header = T, skip = 5)
head(data3)
data3 = read.csv("data3.csv", header = F ) #, skip = 5)
head(data3)
data3 = read.csv("data3.csv", header = F, skip = 5)
head(data3)
data4[1:6,1:4]
colnames(data3) = c("CountryCode", "Rank", "Economy", "Total")
head(data3)
data3[1:13,1:3]
data3[170:180,1:3]
